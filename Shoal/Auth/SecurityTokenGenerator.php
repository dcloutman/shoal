<?php
/**
 * \Shoal\Auth\SecurityTokenGenerator
 * @author David Cloutman
 * @package \Shoal\Auth
 * @license MIT
 *
 * Provides a mechanism for creating and outputting CSRF tokens.
 *
 */

namespace Shoal\Auth;

use Shoal\Crypt\Urandom;

class SecurityTokenGenerator {
    const GENERATE_SHA256 = 0;
    const GENERATE_BASE64 = 1;

    protected $sessionNamePrefix = 'shoal';
    protected $cookieNamePrefix = 'shoal';
    protected $useUrandom = false;
    protected $tokenType = -1;

    /**
     * Random values are generated by a call to rand() using the maxium allowable range by
     * default. Stronger pseudo-randomness can be achieved by using the /dev/urandom file
     * at the cost of speed due to makeing a call to the filesystem.
     * @param boolean $val true to use /dev/urandom, false to use rand(). Default is false.
     */
    public function setUseUrandom ($val = false) {
        $this->useUrandom = $val;
    }

    public function setNonceCookie () {
        $_COOKIE["{$this->cookieNamePrefix}_nonce"] = $this->generateValue();
    }

    protected function generateValue () {
	$value = -1;

        //
        if ($this->useUrandom) {
            // Convert random value to a base64 string.
            if ($this->tokenType === self::GENERATE_BASE64) {
            }
            // Convert random value to a SHA256 hash.
            else if ($this->tokenType === self::GENERATE_SHA256) {
            }
        }
        // Default to using a value generated by rand.
        else {
            $value = $this->generateRandomInteger();

            // Convert random value to a base64 string.
            if ($this->tokenType === self::GENERATE_BASE64) {
            }
            // Convert random value to a SHA256 hash.
            else if ($this->tokenType === self::GENERATE_SHA256) {
            }
        }

	return $value;
    }

    protected function pullBase64String () {
        // This will produce a base64 string no longer than 4096 characters, the maximum cookie length.
        return Urandom::getRandomBase64String(3071);
    }

    protected function generateRandomInteger () {
        return rand();
    }

}
